## COLLECTING THE DATA using REST API ##
#
import requests
import pandas as pd
import numpy as np
import datetime
import json

#This will print all columns of a dataframe
pd.set_option('display.max_columns', None)
#This will print all of the data in a feature
pd.set_option('display.max_colwidth', None)

#Defining functions that will help use the API to extract information using identification numbers in the launch data
#Takes the dataset and uses the launch pad column to call the API and append the data to the list
def getBoosterVersion(data):
    for x in data['rocket']:
       if x:
        response = requests.get("https://api.spacexdata.com/v4/rockets/"+str(x)).json()
        BoosterVersion.append(response['name'])

#Takes the dataset and uses the payloads column to call the API and append the data to the list
def getLaunchSite(data):
    for x in data['launchpad']:
       if x:
         response = requests.get("https://api.spacexdata.com/v4/launchpads/"+str(x)).json()
         Longitude.append(response['longitude'])
         Latitude.append(response['latitude'])
         LaunchSite.append(response['name'])

#Takes the dataset and uses the paylloads column to call the API and append the data to the lists
def getPayloadData(data):
    for load in data['payloads']:
       if load:
        response = requests.get("https://api.spacexdata.com/v4/payloads/"+load).json()
        PayloadMass.append(response['mass_kg'])
        Orbit.append(response['orbit'])

#Takes the dataset and uses the cores column to call the API and append the data to the lists,
#We would like to learn the outcome of the landing, type of landing, number of flights with that core,
#whether gridfins were used, if that core is reused, if legs were used, the landing pad used the block
#of the core, the number of times and the serial number of the core
def getCoreData(data):
    for core in data['cores']:
            if core['core'] != None:
                response = requests.get("https://api.spacexdata.com/v4/cores/"+core['core']).json()
                Block.append(response['block'])
                ReusedCount.append(response['reuse_count'])
                Serial.append(response['serial'])
            else:
                Block.append(None)
                ReusedCount.append(None)
                Serial.append(None)
            Outcome.append(str(core['landing_success'])+' '+str(core['landing_type']))
            Flights.append(core['flight'])
            GridFins.append(core['gridfins'])
            Reused.append(core['reused'])
            Legs.append(core['legs'])
            LandingPad.append(core['landpad'])

#Now we can begin requesting rocket launch data from SpaceX API
spacex_url="https://api.spacexdata.com/v4/launches/past"
response = requests.get(spacex_url)

#Makes the requested JSON result more consistent using the following static response object for this project:
static_json_url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/API_call_spacex_api.json'

#Now we decode the response content as a Json and turn it into a Pandas Dataframe
datas= requests.get(static_json_url)
results = json.loads(datas.text)
pd.DataFrame(results)
data = pd.json_normalize(results)

#Print the first 5 rows
data.head(5)

# From the printed dataframe, you'll notice alot of the data are IDs. 
# I used the API again to get information about the launches using the IDs given for each launch

# Lets take a subset of our dataframe keeping only the features we want and the flight number, and date_utc.
data = data[['rocket', 'payloads', 'launchpad', 'cores', 'flight_number', 'date_utc']]

# I removed rows with multiple cores because those are falcon rockets with 2 extra rocket boosters and rows that have multiple payloads in a single rocket.
data = data[data['cores'].map(len)==1]
data = data[data['payloads'].map(len)==1]

# Since payloads and cores are lists of size 1 we will also extract the single value in the list and replace the feature.
data['cores'] = data['cores'].map(lambda x : x[0])
data['payloads'] = data['payloads'].map(lambda x : x[0])

# I also want to convert the date_utc to a datetime datatype and then extracting the date leaving the time
data['date'] = pd.to_datetime(data['date_utc']).dt.date

# Using the date we will restrict the dates of the launches
data = data[data['date'] <= datetime.date(2020, 11, 13)]

#Create empty lists to hold the data that we will extract and later use to construct a data frame
BoosterVersion = []
PayloadMass = []
Orbit = []
LaunchSite = []
Outcome = []
Flights = []
GridFins = []
Reused = []
Legs = []
LandingPad = []
Block = []
ReusedCount = []
Serial = []
Longitude = []
Latitude = []

#Now I can apply my functions from earlier to extract the data. 
getBoosterVersion(data)
getLaunchSite(data)
getPayloadData(data)
getCoreData(data)

# Finally I constructed the dataset using the data i've obtained
launch_dict = {'FlightNumber': list(data['flight_number']),
'Date': list(data['date']),
'BoosterVersion':BoosterVersion,
'PayloadMass':PayloadMass,
'Orbit':Orbit,
'LaunchSite':LaunchSite,
'Outcome':Outcome,
'Flights':Flights,
'GridFins':GridFins,
'Reused':Reused,
'Legs':Legs,
'LandingPad':LandingPad,
'Block':Block,
'ReusedCount':ReusedCount,
'Serial':Serial,
'Longitude': Longitude,
'Latitude': Latitude}

# Now I create a Pandas data frame from the dictionary launch_dict
data1 = pd.DataFrame(launch_dict)

#Looking at the summary of the dataframe
data1.head(1)

# The next stepp is to filter the dataframe to only include launches from Falcon 9 
data_falcon9 = data1.loc[data1['BoosterVersion']!='Falcon 1']

#Since we removed some of the values I need to reset the FlightNumber column
data_falcon9.loc[:,'FlightNumber'] = list(range(1, data_falcon9.shape[0]+1))
data_falcon9.head(2)

#The next step is to deal with the missing values within the dataset
data_falcon9.isnull().sum()
#We can see that we have missing values for 'PayloadMass' and 'LandingPad' 
#The landing pad column will retain None values to represent when landing pads were not used

#Dealing with the 'PayloadMass' column by replacing na with the mean values of 'PayloadMass'
# Calculate the mean value of PayloadMass column
payLoadMassMean = data_falcon9['PayloadMass'].mean()
# Replace the np.nan values with its mean value
data_falcon9['PayloadMass'].replace(np.nan, payLoadMassMean, inplace = True)

#Checking the replaced values
data_falcon9.isnull().sum()

#Export this cleaned Dataset to a csv file for later use
data_falcon9.to_csv('dataset_part1.csv', index=False)
